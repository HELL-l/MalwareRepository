#include "main.h"
#include "sound.h"

DWORD WINAPI mouse(LPVOID lpParam)
{
	uint uVar1;
	uint uVar2;
	uint uVar3;
	uint uVar4;
	uint uVar5;

	uVar2 = GetSystemMetrics(0);
	uVar3 = GetSystemMetrics(1);
	do
	{
		uVar1 = rdtsc();
		uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
		uVar5 = uVar5 ^ uVar5 << 0x11;
		uVar1 = rdtsc();
		uVar4 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
		uVar4 = uVar4 ^ uVar4 << 0x11;
		SetCursorPos((uVar4 << 5 ^ uVar4) % uVar2, (uVar5 << 5 ^ uVar5) % uVar3);
		uVar1 = rdtsc();
		uVar4 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
		uVar4 = uVar4 ^ uVar4 << 0x11;
		Sleep(10);
	} while (true);
}

DWORD WINAPI mouse2(LPVOID lpParam) {
	int sh = GetSystemMetrics(0), sw = GetSystemMetrics(1);
	double moveangle = 0; CURSORINFO curinf;
	for (int i = 0;; i++, i %= 20) {
		GetCursorInfo(&curinf);
		SeedXorshift32(__rdtsc());
		HDC desk = GetDC(0);
		int ax = (int)(fabsf(moveangle) * 3);
		int ay = (int)(tan(moveangle) * 3);
		curinf.cbSize = sizeof(curinf);
		DrawIcon(desk, xorshift32() % sw, xorshift32() % sh, curinf.hCursor);
		Sleep(10);
	}
}

DWORD WINAPI gdi3_sab(LPVOID lpParam)
{
	HDC hdc = GetDC(0);
	int x = GetSystemMetrics(0);
	int y = GetSystemMetrics(1);

	while (1)
	{
		hdc = GetDC(0);
		PatBlt(hdc, 0, 0, x, y, PATINVERT);
		Sleep(100);
	}
}

//payload1+3

DWORD WINAPI gdi1(LPVOID lpParam)
{
	HDC hdc = GetDC(0);
	int x = GetSystemMetrics(0);
	int y = GetSystemMetrics(1);

	while (1)
	{
		hdc = GetDC(0);
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 500, rand() % 500, 0)));
		PatBlt(hdc, 0, 0, x, y, PATINVERT);
		Sleep(50);
	}
}

//payload2+5

DWORD WINAPI gdi2(LPVOID lpParam)
{
	HDC hdc;
	int w = GetSystemMetrics(0);
	int h = GetSystemMetrics(1);

	while (1)
	{
		hdc = GetDC(0);
		BitBlt(hdc, rand() % 5, rand() % 5, w, h, hdc, rand() % 5, rand() % 5, SRCPAINT);
		Sleep(1000);
	}
}

//payload4

DWORD WINAPI gdi3(LPVOID lpParam)
{
	int x = GetSystemMetrics(0);
	int y = GetSystemMetrics(1);
	int time = GetTickCount();
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		if (!i)RedrawWindow(0, 0, 0, 200);
		HDC desk = GetDC(NULL);
		HDC hdcdc = CreateCompatibleDC(desk);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcdc, hbm);
		BitBlt(hdcdc, 0, 0, w, h, desk, 0, 0, 0x320008);
		GetBitmapBits(hbm, w * h * 1, data);
		int v = 0;
		BYTE byte = 0;
		if ((GetTickCount() - time) > 2500)
			byte = rand() % 0xff;
		for (int i = 0; w * h > i; i++) {
			if (i % h == 0 && rand() % 100 == 0)
				v = rand() % 50;
			((BYTE*)(data + i))[v % 35] += ((BYTE*)(data + i + v))[v] ^ byte;
		}
		SetBitmapBits(hbm, w * h * 1, data);
		BitBlt(desk, 0, 0, w, h, hdcdc, 0, 0, NOTSRCCOPY);
		DeleteObject(hbm);
		DeleteObject(hdcdc);
		DeleteObject(desk);
		PatBlt(desk, 0, 0, x, y, NOTSRCCOPY);
		Sleep(50);
	}
	return 0;
}

//payload7

VOID WINAPI gdi4_sab()
{
	int x = GetSystemMetrics(0);
	int y = GetSystemMetrics(1);
	HDC hdc = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	int rx;
	hdc = GetDC(0);
	rx = xorshift32() % sw;
	int ry = xorshift32() % sh;
	SelectObject(hdc, CreateSolidBrush(RGB(rand() % 500, rand() % 500, 0)));
	PatBlt(hdc, 0, 0, x, y, PATINVERT);
	BitBlt(hdc, rx, 20, 200, sh, hdc, rx, 0, SRCCOPY);
	BitBlt(hdc, rx, -20, -200, sh, hdc, rx, 0, SRCCOPY);
	BitBlt(hdc, 20, ry, sw, 200, hdc, 0, ry, SRCCOPY);
	BitBlt(hdc, -20, ry, sw, -200, hdc, 0, ry, SRCCOPY);
	Sleep(75);
}

DWORD WINAPI gdi4(LPVOID lpParam) {
	while (1) {
		SeedXorshift32(__rdtsc());
		int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
		HDC desk = GetDC(0);
		gdi4_sab();
	}
}

//payload8

DWORD WINAPI gdi5(LPVOID lpParam)
{
	{
		while (1)
		{
			HDC dc = GetDC(0);
			INT ix = GetSystemMetrics(0);
			INT iy = GetSystemMetrics(1);
			SeedXorshift32(__rdtsc());
			if (xorshift32() % 4 == 0)
			{
				SelectObject(dc, CreateSolidBrush(RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
				BitBlt(dc, 25 - 25, 25 - 25, ix, iy, dc, 5, 5, 0x2837E28);
			}
			else if (xorshift32() % 4 == 1)
			{
				SelectObject(dc, CreateSolidBrush(RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
				BitBlt(dc, 25 - 25, 25 - 25, ix, iy, dc, 5, 5, 0x2837E28);
			}
			else if (xorshift32() % 4 == 2)
			{
				SelectObject(dc, CreateSolidBrush(RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
				BitBlt(dc, 25 - 25, 25 - 25, ix, iy, dc, 5, 5, 0x2837E28);
			}
			else if (xorshift32() % 4 == 3)
			{
				SelectObject(dc, CreateSolidBrush(RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
				BitBlt(dc, 25 - 25, 25 - 25, ix, iy, dc, 5, 5, 0x2837E28);
			}
			Sleep(25);
		}
	}
}

int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
	if (MessageBoxW(NULL, L"WARNING!\n\nYou have ran a Trojan known as Dioxide.exe that has full capacity to delete all of your data and your operating system.\n\nBy continuing, you keep in mind that the creator will not be responsible for any damage caused by this trojan and it is highly recommended that you run this in a testing virtual machine where a snapshot has been made before execution for the sake of entertainment and analysis.\n\nAre you sure you want to run this?", L"Malware alert - FAKEDIOXIDE", MB_ICONWARNING | MB_YESNO) != IDYES)
		return false;

	if (MessageBoxW(NULL, L"FINAL WARNING!!!\n\nThis Trojan has a lot of destructive potential. You will lose all of your data if you continue, and the creator will not be responsible for any of the damage caused. This is not meant to be malicious but simply for entertainment and educational purposes.\n\nAre you sure you want to continue? This is your final chance to stop this program from execution.", L"Malware alert - FAKEDIOXIDE", MB_ICONWARNING | MB_YESNO) != IDYES)
		return false;

	Sleep(5000);
	sound1();
	Sleep(15000);
	sound2();
	HANDLE thread0 = CreateThread(0, 0, mouse, 0, 0, 0);
	HANDLE thread1 = CreateThread(0, 0, gdi1, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread1, 0);
	CloseHandle(thread1);
	RedrawWindow(0, 0, 0, 133);
	sound3();
	HANDLE thread2 = CreateThread(0, 0, gdi2, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread2, 0);
	CloseHandle(thread2);
	RedrawWindow(0, 0, 0, 133);
	sound2();
	HANDLE thread3 = CreateThread(0, 0, gdi1, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread3, 0);
	CloseHandle(thread3);
	RedrawWindow(0, 0, 0, 133);
	sound4();
	HANDLE thread4 = CreateThread(0, 0, gdi3, 0, 0, 0);
	HANDLE thread5 = CreateThread(0, 0, gdi3_sab, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread4, 0);
	CloseHandle(thread4);
	TerminateThread(thread5, 0);
	CloseHandle(thread5);
	RedrawWindow(0, 0, 0, 133);
	sound3();
	HANDLE thread6 = CreateThread(0, 0, gdi2, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread6, 0);
	CloseHandle(thread6);
	RedrawWindow(0, 0, 0, 133);
	sound4();
	HANDLE thread7 = CreateThread(0, 0, gdi3, 0, 0, 0);
	HANDLE thread8 = CreateThread(0, 0, gdi3_sab, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread7, 0);
	CloseHandle(thread7);
	TerminateThread(thread8, 0);
	CloseHandle(thread8);
	RedrawWindow(0, 0, 0, 133);
	sound5();
	HANDLE thread9 = CreateThread(0, 0, gdi4, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread9, 0);
	CloseHandle(thread9);
	RedrawWindow(0, 0, 0, 133);
	sound6();
	HANDLE thread10 = CreateThread(0, 0, gdi5, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread10, 0);
	CloseHandle(thread10);
	RedrawWindow(0, 0, 0, 133);
	sound4();
	HANDLE thread11 = CreateThread(0, 0, mouse2, 0, 0, 0);
	Sleep(20000);
	exit(1);
	while (1) {}
}